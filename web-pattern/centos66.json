{
  "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "newStorageAccountName": {
      "type": "String",
	  "defaultValue": "jmlibertysg"
    },
    "newDomainName": {
      "type": "String",
	  "defaultValue": "jmliberty"
    },
    "newVirtualNetworkName": {
      "type": "String",
	  "defaultValue": "jmliberty"
    },
    "vnetAddressSpace": {
      "type": "String"
    },
    "hostName": {
      "type": "String",
	  "defaultValue": "jmliberty"
    },
    "userName": {
      "type": "String",
	  "defaultValue": "jarek"
    },

    "password": {
      "type": "SecureString"
    },
    "location": {
      "type": "String",
	  "defaultValue": "uswest"
    },

    "hardwareSize": {
      "type": "String",
	  "defaultValue": "Standard_A2"
    }
  },
  "resources": [
    {
      "type": "Microsoft.ClassicStorage/storageAccounts",
      "name": "[parameters('newStorageAccountName')]",
      "apiVersion": "2014-06-01",
      "location": "[parameters('location')]",
      "properties": {
        "accountType": "Standard-GRS"
      }
    },
    {
      "type": "Microsoft.ClassicCompute/domainNames",
      "name": "[parameters('newDomainName')]",
      "apiVersion": "2014-06-01",
      "location": "[parameters('location')]",
      "properties": {}
    },
    {
      "type": "Microsoft.ClassicNetwork/virtualNetworks",
      "name": "[parameters('newVirtualNetworkName')]",
      "apiVersion": "2014-06-01",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressSpace')]"
          ]
        },
        "subnets": [
          {
            "name": "Subnet-1",
            "addressPrefix": "[parameters('vnetAddressSpace')]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.ClassicCompute/virtualMachines",
      "name": "[parameters('hostName')]",
      "apiVersion": "2014-06-01",
      "location": "[parameters('location')]",
      "properties": {
        "domainName": {
          "id": "[concat(resourceGroup().id, '/providers/Microsoft.ClassicCompute/domainNames/', parameters('newDomainName'))]"
        },
        "networkProfile": {
          "virtualNetwork": {
            "id": "[concat(resourceGroup().id, '/providers/Microsoft.ClassicNetwork/virtualNetworks/', parameters('newVirtualNetworkName'))]",
            "subnetNames": [
              "Subnet-1"
            ]
          },
          "inputEndpoints": [
            {
              "enableDirectServerReturn": "False",
              "endpointName": "SSH",
              "privatePort": 22,
              "publicPort": null,
              "protocol": "tcp"
            },
				{
					"enableDirectServerReturn": "False",
					"endpointName": "http",
					"privatePort": 9121,
					"publicPort": 9121,
					"protocol": "tcp"
				}
          ]
        },
        "hardwareProfile": {
          "size": "[parameters('hardwareSize')]",
          "platformGuestAgent": "true"
        },
        "operatingSystemProfile": {
          "computerName": "[parameters('hostName')]",
          "adminUserName": "[parameters('userName')]",
          "adminPassword": "[parameters('password')]",
          "linuxOperatingSystemProfile": {
            "disableSshPasswordAuthentication": "false"
          }
        },
        "storageProfile": {
          "operatingSystemDisk": {
            "diskName": "[concat(parameters('newDomainName'), '-', parameters('hostName'), '-osdisk')]",
            "vhdUri": "[concat(reference(concat('Microsoft.ClassicStorage/storageAccounts/', parameters('newStorageAccountName'))).endpoints[0], 'vhds/', parameters('newDomainName'), '-', parameters('hostName'), '-osdisk.vhd')]",
            "caching": "ReadWrite",
            "sourceImageName": "5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-66-20150325"
          }
        }
      },
      "dependsOn": [
        "[concat('Microsoft.ClassicCompute/domainNames/', parameters('newDomainName'))]",
        "[concat('Microsoft.ClassicNetwork/virtualNetworks/', parameters('newVirtualNetworkName'))]"
      ]
    },
    	{
		"type": "Microsoft.Compute/virtualMachines/extensions",
		"name": "[concat(parameters('hostName'),'/wlpinstall')]",
		"apiVersion": "2015-05-01-preview",
		"location": "[parameters('location')]",
		"dependsOn": ["[concat('Microsoft.ClassicCompute/virtualMachines/', parameters('hostName'))]"],
		"properties": {
			"publisher": "Microsoft.OSTCExtensions",
			"type": "CustomScriptForLinux",
			"typeHandlerVersion": "1.2",
			"settings": {
				"fileUris": ["https://raw.github.com/jarekmisz/azure-scripts/master/web-pattern/wlpinstall.sh"],
				"commandToExecute": "bash wlpinstall.sh"
			}
		}
	},
	{
		"type": "Microsoft.Compute/virtualMachines/extensions",
		"name": "[concat(parameters('vmName'),'/sampleinstall')]",
		"apiVersion": "2015-05-01-preview",
		"location": "[parameters('location')]",
		"dependsOn": ["[concat('Microsoft.Compute/virtualMachines/',parameters('vmName'),'/extensions/wlpinstall')]"],
		"properties": {
			"publisher": "Microsoft.OSTCExtensions",
			"type": "CustomScriptForLinux",
			"typeHandlerVersion": "1.2",
			"settings": {
				"fileUris": ["https://raw.github.com/jarekmisz/azure-scripts/master/web-pattern/sampleinstall.sh"],
				"commandToExecute": "bash sampleinstall.sh"
			}
		}
	}
  ]
}